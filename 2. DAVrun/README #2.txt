Данные программы является свободным программным обеспечением, распространяющимися по лицензии MIT.
Копия лицензии: https://opensource.org/licenses/MIT

Copyright (c) 2024 Otto
Автор: Otto
Версия: 08.12.24
GitHub страница:  https://github.com/Otto17/DAVrun
GitFlic страница: https://gitflic.ru/project/otto/davrun

г. Омск 2024



ОПИСАНИЕ РАБОТЫ ПРОГРАММЫ "DAVrun".

Программа состоит из двух частей: служба и авторазвёртывальщик.
Служба запускается при загрузке ПК и раз в 10 минут запускает авторазвёртывальщик "DAVrun", который в свою очередь подключается к серверу по протоколу "WebDAV" и проверяет наличие файла с таким же именем ПК, как и у ПК с которого он запущен.

Если файл с таким же именем есть, тогда происходит загрузка самораспаковывающегося архива, проверяется его хеш сумма (если хеш-сумма не сходится с той, что указана в имени файла на сервере, тогда через 10 минут ещё раз выкачиваем и проверяем).
После успешной проверки хеш-суммы "DAVrun" удаляет файл с именем ПК на сервере и запускает скаченный самораспаковывающийся архив с наивысшими правами и ждёт пока запущенный самораспаковывающийся архив завершит свою работу.

После завершения работы самораспаковывающегося архива "DAVrun" удаляет его и завершает свою работу, что бы через 10 минут вновь проверить сервер на файл с таким же именем.
Если файл с таким же именем, как у ПК на котором запущен "DAVrun" будет отсутствовать на сервере, тогда программа просто завершает свою работу.


КРАТКИЕ ПОЯСНЕНИЯ ПО ФАЙЛАМ И ПУТЯМ.

Логи файлов хранятся в папке "C:\ProgramData\DAVrun".
Временная папка для развёртывания самораспаковывающегося архива создаётся автоматически по пути "C:\ProgramData\DAVrun\Temp$DEV$RUN".

Программа "NamePC Full" при запуске создаёт в этой же папке файл с полным именем компьютера.
Программа "NamePC Cut-7" при запуске создаёт в этой же папке файл с обрезанным именем компьютера (обрезаются первые 7 символов).

Программа "Launch_LocalSystem" (написана на C) позволяет запустить другую программу от имени "СИСТЕМА" методом перетаскивания на "Launch_LocalSystem.exe" исполняемого файла, либо запуск через аргумент в cmd: Launch_LocalSystem.exe <Путь к запускаемой программе>.
Launch_LocalSystem нужна для того, что бы привязать конфиг к пользователю "СИСТЕМА", так как служба "SERVICE-DAVrun" работает от пользователя "СИСТЕМА" и если попытаться запустить "DAVrun" от другого пользователя, тогда сработает защита и конфиг удалится.
Есть и второй вариант, это после создания службы во вкладке "Вход в систему" указать пользователя (с административными правами) от которого будет работать служба, тогда и "DAVrun" будет запускаться от того же пользователя, что и указан в службе, но в этом случае полномочия в системе могут быть ниже.

Launch_LocalSystem можно использовать как самостоятельную программу для других своих целей.


Из плюсов:
- Шифрованное HTTPS соединение;
- Использование Digest-аутентификации (передаётся хэшовое значение логина/пароля);
- Используется авторизация по логину/паролю с проверкой подлинности сертификата сервера;
- Используется библиотека "libcurl", что бы напрямую взаимодействовать с WebDAV, не полагаясь на внешние команды "system()", что повышает конфиденциальность логина и пароля, а так же увеличивает скорость работы программы;
- Встроенная проверка хеша скаченного самораспаковывающегося архива (SHA-256);
- Поддержка Кириллицы и всех символов разрешённых в именах файлов;
- Симметричное шифрование конфиг файла (AES-256) и ключа;
- Возможность перед компиляцией выбрать тип защиты конфига, сделает его НЕпереносимым на другие ПК "STRONG_ENCRYPTION" (привязка к компьютеру и УЧЁТНОЙ ЗАПИСИ), либо без привязки "SOFT_ENCRYPTION", но с меньшей защитой. Касаемо "STRONG_ENCRYPTION" - конфиг должен создаваться от того пользователя, от которого будет запускаться DAVrun, об этом написал чуть выше;
- Создание/изменение/удаление параметров зашифрованного конфиг файла осуществляется через аргументы командной строки;
- Потребление ОЗУ DAVrun при работе с большим файлом (1,2Гб) (во время загрузки и выполнения архива) не превышает 14Мб (написан на C);
- Потребление ОЗУ работающей службой не превышает 4Мб (написан на C#);
- Включены некоторые базовые защиты при компиляции (описаны ниже).


КРАТКАЯ НАСТРОЙКА (для компиляции).

1) Если требуется, то скачиваем актуальную версию библиотеки "libcurl" с сайта "https://curl.se/windows/", выбираем "curl for 64-bit".
Из архива с папки "bin" копируем с заменой в папку "src\Загрузчик" библиотеку "libcurl-x64.dll", так же заменяем в проекте "src\Загрузчик" папки "include" и "lib" из архива. Архив больше не нужен.
Использую версию: 8.11.0

2) Если требуется, то скачиваем актуальную версию (стабильный релиз) библиотеки "libicu" с сайта "https://github.com/unicode-org/icu/releases", скачиваем "icu4c-**_*-Win64-MSVC2022.zip".
Из архива с папки "bin64" копируем с заменой в папку "src\Загрузчик" библиотеки "icudt76.dll" и "icuuc76.dll".
В папку "include" копируем из архива папку "unicode", в "lib" аналогично копируем с заменой файлов из архива с папки "lib64". Архив больше не нужен.
Использую версию: "ICU 76.1" - "icu4c-76_1-Win64-MSVC2022.zip".

3) Если требуется, то скачиваем библиотеки "libxml2" с сайта "http://xmlsoft.org/sources/win32/64bit/", качаем следующие архивы "iconv-1.14-win32-x86_64.7z", "libxml2-2.9.3-win32-x86_64.7z" и "zlib-1.2.8-win32-x86_64.7z" (скорее всего эти библиотеки обновляться уже не будут никогда).
Из архива "iconv-1.14-win32-x86_64.7z" с папки "bin" нужна библиотека "libiconv-2.dll", остальное (include и lib) копируем аналогично.
Из архива "libxml2-2.9.3-win32-x86_64.7z" с папки "bin" нужна библиотека "libxml2-2.dll", а из папки в архиве "include\libxml2" копируем "libxml" в проект, из "lib" копируем только 3 библиотеки с расширением "*.a" и "*.la".
Из архива "zlib-1.2.8-win32-x86_64.7z" с папки "bin" нужна только библиотека "zlib1.dll".

4) Устанавливаем компилятор GCC (MinGW), переходим на "https://winlibs.com/" и скачиваем "Release versions" X64 версии (with MCF threads).
Распаковываем папку "mingw64" из архива по пути: "C:\Program Files\GCC\" (создаём папку GCC, если её нет, либо удаляем старую версию mingw64 из папки GCC и заменяем новой).
Добавляем в системный PATH 2 пути:
"C:\Program Files\GCC\mingw64\bin"
"C:\Program Files\GCC\mingw64\libexec\gcc\x86_64-w64-mingw32\14.1.0" (номер новой версии может отличаться)
Далее проверяем версию в cmd "gcc --version". Архив больше не нужен.
Использую версию: GCC 14.2.0 (with MCF threads) + MinGW-w64 12.0.0 UCRT (release 1)

P.S. Библиотеки в папке "Загрузчик" "libssp-0.dll" скопирована из папки "mingw64\bin", входящая в состав GCC, она нужна для функции SSP (Stack Smashing Protector) защита от переполнения буфера на основе стека, остальные DLL библиотеки взяты из соответствующих архивов, описанных выше.



ПРОЦЕСС КОМПИЛЯЦИИ.

Компилировать через cmd или VS Code командами:
- для программы загрузчика (БЕЗ привязки к компьютеру):  gcc -O2 -fno-ident -fstack-protector -fPIE -o DAVrun main.c logFile.c soft_Encryption.c -licuuc -licuin -licudt -lxml2 -lcurl -lssl -lcrypto -lcrypt32 -lbcrypt -lws2_32 -L ./lib -I ./include
- для программы загрузчика (С привязкой к компьютеру):  gcc -O2 -fno-ident -fstack-protector -fPIE -o DAVrun main.c logFile.c strong_Encryption.c -licuuc -licuin -licudt -lxml2 -lcurl -lssl -lcrypto -lcrypt32 -lbcrypt -lws2_32 -L ./lib -I ./include

- для программы создателя "NamePC": gcc -O2 -o NamePC main.c
- для программы Launch_LocalSystem: gcc -O2 -o Launch_LocalSystem main.c


Описание ключей компилятора GCC:
-O2 — оптимизация кода. Уровень 2 из возможных четырёх. Компилятор пытается сделать код быстрее, но не жертвует читаемостью и соблюдением стандартов.

-fno-ident — отключение генерации метки идентификации. По умолчанию GCC добавляет в исполняемый файл информацию о версии компилятора и дате компиляции. Этот флаг отключает генерацию такой информации.

-fstack-protector — включение защиты стека. Компилятор добавляет в исполняемый файл код, который проверяет целостность стека при каждом его использовании. Это помогает предотвратить некоторые виды атак, связанные с переполнением буфера.

-fPIE — создание позиции для импорта (Position Independent Executable). Такой исполняемый файл может быть загружен в произвольный адрес памяти, что упрощает обеспечение безопасности системы.

-o — указывает имя выходного файла.

- main.c — имя исходного (главного) файла, который нужно скомпилировать.

- logFile.c  и soft_Encryption.c/strong_Encryption.c — подключенные исходные файлы с логом и созданием зашифрованного конфига.

-licuuc -licuin -licudt -lxml2 -lcurl -lssl -lcrypto -lcrypt32 -lbcrypt -lws2_32 -L .\lib -I .\include — Это подключенные библиотеки и заголовочные файлы libcurl, libxml2, libicu и SSL для хеша и шифрования.


УСТАНОВКА ИКОНОК СКОМПИЛИРОВАННЫМ ПРОГРАММАМ.

Задать иконку скомпилированной программе можно через "Resource Hacker" ИЗ ПАПКИ "Стороннее ПО".
Запускаем "ResourceHacker.exe" -> открываем скомпилированный *.exe через Ctrl+O, далее Ctrl+M и выбираем *.ico иконку (разрешения 48x48 достаточно), жмём "Добавить ресурс" и сохраняем *.exe с заменой файла.
