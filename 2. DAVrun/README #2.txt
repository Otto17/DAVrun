Данные программы является свободным программным обеспечением, распространяющимися по лицензии MIT.
Копия лицензии: https://opensource.org/licenses/MIT

Copyright (c) 2024 Otto
Автор: Otto
Версия: 04.07.24
GitHub страница:  https://github.com/Otto17/DAVrun
GitFlic страница: https://gitflic.ru/project/otto/davrun

г. Омск 2024



ОПИСАНИЕ РАБОТЫ ПРОГРАММЫ "DAVrun".

Программа состоит из двух частей: служба и авторазвёртывальщик.
Служба запускается при загрузке ПК (потребляем очень мало ресурсов) и раз в 10 минут (по умолчанию) запускает авторазвёртывальщик "DAVrun", который в свою очередь подключается к серверу по протоколу "WebDAV" и проверяет наличие файла с таким же именем ПК, как и ПК с которого он запущен.

Если файл с таким же именем есть, тогда происходит загрузка самораспаковывающегося архива, проверяется его хеш сумма
(если хеш-сумма не сходится с той, что указана в имени файла на сервере, тогда ещё раз выкачиваем и проверяем),
после успешной проверки хеш-суммы "DAVrun" удаляет файл с именем ПК на сервере и запускает скаченный самораспаковывающийся архив с наивысшими правами и ждём пока тот завершит свою работу.

После завершения работы самораспаковывающегося архива "DAVrun" удаляет его и завершает свою работу, что бы через 10 минут вновь повторить сервер на файл с таким же именем.
Если файла на сервере будет отсутствовать с таким же именем, как у ПК, на котором запущен "DAVrun", тогда программа просто завершает свою работу.

ВНИМАНИЕ - Файлы на сервере должны быть написаны латиницей, иначе они скачаются программой DAV с кракозябрами в названии файла!


КРАТКОЕ ПОЯСНЕНИЯ.

Логи файлов хранятся в папке: C:\ProgramData\DAVrun
Временная папка для развёртывания самораспаковывающегося архива создаётся по пути: C:\ProgramData\DAVrun\Temp$DEV$RUN
Программа "NamePC Full" при запуске создаёт в этой же папке файл с полным именем компьютера.
Программа "NamePC Cut-7" при запуске создаёт в этой же папке файл с обрезанным именем компьютера (обрезаются первые 7 символов).

Из плюсов:
- Шифрованное HTTPS соединение;
- Использование Digest-аутентификации (передаётся хэшовое значение логина/пароля);
- Используется авторизация по логину/паролю с проверкой подлинности сертификата сервера;
- Используется библиотека "libcurl", что бы напрямую взаимодействовать с WebDAV, не полагаясь на внешние команды "system()", что повышает конфиденциальность логина и пароля, а так же увеличивает скорость работы программы;
- Потребление ОЗУ DAVrun при работе с большим файлом (во время загрузки и выполнения) не превышает 13Мб;
- Потребление ОЗУ службой не превышает 4Мб (на C#);
- Включены некоторые базовые защиты при компиляции (описаны ниже).


КРАТКАЯ НАСТРОЙКА  (для компиляции).

1) Если требуется, то скачиваем актуальную версию библиотеки "libcurl" с сайта "https://curl.se/windows/", выбираем "curl for 64-bit".
Из архива с папки "bin" копируем с заменой в папку "src\Загрузчик" библиотеку "libcurl-x64.dll", так же удаляем с проекта "src\Загрузчик" папки "include" и "lib" и вместо них копируем из архива эти же обновлённые папки. Архив больше не нужен.
На момент создания программы использую версию: 8.8.0

2) Если требуется, то скачиваем актуальную версию (стабильный релиз) библиотеки "libicu" с сайта "https://github.com/unicode-org/icu/releases", скачиваем "icu4c-**_*-Win64-MSVC2022.zip".
Из архива с папки "bin64" копируем с заменой в папку "src\Загрузчик" библиотеки "icudt75.dll" и "icuuc75.dll".
В папку "include" копируем из архива папку "unicode", в "lib" аналогично копируем с заменой файлов из архива. Архив больше не нужен.
На момент создания программы использую версию: "ICU 75.1" - "icu4c-75_1-Win64-MSVC2022.zip".

3) Если требуется, то скачиваем библиотеки "libxml2" с сайта "http://xmlsoft.org/sources/win32/64bit/", качаем следдующие архивы "iconv-1.14-win32-x86_64.7z", "libxml2-2.9.3-win32-x86_64.7z" и "zlib-1.2.8-win32-x86_64.7z".
Из архива "iconv-1.14-win32-x86_64.7z" с папки "bin" нужна библиотека "libiconv-2.dll", останоное копирем аналогично.
Из архива "libxml2-2.9.3-win32-x86_64.7z" с папки "bin" нужна библиотека "libxml2-2.dll", а из папки в архиве "include\libxml2" копируем "libxml" в проект, из "lib" копируем только 3 библиотеки с расширением "*.a".
Из архива "zlib-1.2.8-win32-x86_64.7z" с папки "bin" нужна только библиотека "zlib1.dll".

4) Устанавливаем компилятор GCC (MinGW), переходим на "https://winlibs.com/" и скачиваем "Release versions" X64 версии (with MCF threads).
Распаковываем папку "mingw64" из архива по пути: "C:\Program Files\GCC\" (создаём папку GCC, если её нет, либо удаляем старую версию mingw64 из папки GCC и заменяем новой).
Добавляем в системный PATH 2 пути:
"C:\Program Files\GCC\mingw64\bin"
"C:\Program Files\GCC\mingw64\libexec\gcc\x86_64-w64-mingw32\14.1.0" (номер новой версии может отличаться)
Далее проверяем версию в cmd "gcc --version". Архив больше не нужен.
На момент создания программы использую версию: GCC 14.1.0 (with MCF threads) + MinGW-w64 11.0.1 (UCRT)

P.S. Библиотека "libssp-0.dll" скопирована из папки "mingw64\bin", входящая в состав GCC, она нужна для функции SSP (Stack Smashing Protector) защита от переполнения буфера на основе стека.


ПРОЦЕСС КОМПИЛЯЦИИ.

Компилировать через cmd или VS Code командами:
- для программы загрузчика:  gcc -O2 -fno-ident -fstack-protector -fPIE -o DAVrun main.c -licuuc -licuin -licudt -lxml2 -lcurl -L .\lib -I .\include
- для программы создателя:   gcc -O2 -o NamePC main.c


Описание ключей компилятора GCC:
-O2 — оптимизация кода. Уровень 2 из возможных четырёх. Компилятор пытается сделать код быстрее, но не жертвует читаемостью и соблюдением стандартов.

-fno-ident — отключение генерации метки идентификации. По умолчанию GCC добавляет в исполняемый файл информацию о версии компилятора и дате компиляции. Этот флаг отключает генерацию такой информации.

-fstack-protector — включение защиты стека. Компилятор добавляет в исполняемый файл код, который проверяет целостность стека при каждом его использовании. Это помогает предотвратить некоторые виды атак, связанные с переполнением буфера.

-fPIE — создание позиции для импорта (Position Independent Executable). Такой исполняемый файл может быть загружен в произвольный адрес памяти, что упрощает обеспечение безопасности системы.

-o — указывает имя выходного файла.

- main.c — имя исходного файла, который нужно скомпилировать.

-licuuc -licuin -licudt -lxml2 -lcurl -L .\lib -I .\include — Это подключенные библиотеки и заголовочные файлы libcurl, libxml2 и libicu.


УСТАНОВКА ИКОНОК СКОМПИЛИРОВАННЫМ ПРОГРАММАМ.

Задать иконку скомпилированной программе можно через "Resource Hacker" ИЗ ПАПКИ "Стороннее ПО".
Запускаем "ResourceHacker.exe" -> открываем скомпилированный *.exe через Ctrl+O, далее Ctrl+M и выбираем *.ico иконку (разрешения 48x48 достаточно) и жмём "Добавить ресурс" и сохраняем *.exe с заменой файла.
