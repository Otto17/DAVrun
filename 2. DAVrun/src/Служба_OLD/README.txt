Данные программы является свободным программным обеспечением, распространяющимися по лицензии MIT.
Копия лицензии: https://opensource.org/licenses/MIT

Copyright (c) 2024 Otto
Автор: Otto
Версия: 20.06.24
GitHub страница:  https://github.com/Otto17/DAVrun
GitFlic страница: https://gitflic.ru/project/otto/davrun

г. Омск 2024



ЭТО ПЕРВАЯ ВЕРСИЯ ПРОГРАММЫ-СЛУЖБЫ НА ЯЗЫКЕ "C" И ОНА УЖЕ НЕ АКТУАЛЬНА ДЛЯ МОЕГО ПРОЕКТА.


ЭТА ПРОГРАММА РАБОЧАЯ, НО ВСЁ ЖЕ РЕШИЛ ОТПРАВИТЬ ЕЁ В "OLD" И ПЕРЕПИСАТЬ СЛУЖБУ НА C#, ТАМ РАБОТАЕТ ОНА СТАБИЛЬНЕЙ И КОД ПИСАТЬ ПРОЩЕ.

ЕСЛИ ЕСТЬ ЖЕЛАНИЕ МОЖЕТЕ ИСПОЛЬЗОВАТЬ ЭТУ СЛУЖБА НА "C" ИЛИ ДЛЯ СВОИХ ЦЕЛЕЙ, ВЫКЛАДЫВАЮ ЕЁ ПРОСТО ТАК, МОЖЕТ КОМУ ПРИГОДИТСЯ.

В этой службе на "C" заметил баг, (который уже не стал исправлять), он заключается в том, что если при запущенной службе переименовать или удалить запускаемый файл "DAVrun.exe", то служба падает и не восстанавливается, хотя в диспетчере служб Windows показывает, что служба яко бы работает. Хотя этот баг не особо и актуален, так как "DAVrun.exe" не нужно удалять или перемещать.

Потребление ОЗУ службой не превышает 1Мб.


КРАТКАЯ НАСТРОЙКА  (для компиляции).

1) Если требуется, то скачиваем актуальную версию библиотеки "libcurl" с сайта "https://curl.se/windows/", выбираем "curl for 64-bit".
Из архива с папки "bin" копируем с заменой в папку "src\Загрузчик" библиотеку "libcurl-x64.dll", так же удаляем с проекта "src\Загрузчик" папки "include" и "lib" и вместо них копируем из архива эти же обновлённые папки. Архив больше не нужен.
На момент создания программы использую версию: 8.8.0

2) Устанавливаем компилятор GCC (MinGW), переходим на "https://winlibs.com/" и скачиваем "Release versions" X64 версии (with MCF threads).
Распаковываем папку "mingw64" из архива по пути: "C:\Program Files\GCC\" (создаём папку GCC, если её нет, либо удаляем старую версию mingw64 из папки GCC и заменяем новой).
Добавляем в системный PATH 2 пути:
"C:\Program Files\GCC\mingw64\bin"
"C:\Program Files\GCC\mingw64\libexec\gcc\x86_64-w64-mingw32\14.1.0" (номер новой версии может отличаться)
Далее проверяем версию в cmd "gcc --version". Архив больше не нужен.
На момент создания программы использую версию: GCC 14.1.0 (with MCF threads) + MinGW-w64 11.0.1 (UCRT)

P.S. Библиотека "libssp-0.dll" скопирована из папки "mingw64\bin", входящая в состав GCC, она нужна для функции SSP (Stack Smashing Protector) защита от переполнения буфера на основе стека.


ПРОЦЕСС КОМПИЛЯЦИИ:

Компилировать через cmd или VS Code командой:
gcc -O2 -fno-ident -fstack-protector -fPIE -o SERVICE-DAVrun main.c


Описание ключей компилятора GCC:
-O2 — оптимизация кода. Уровень 2 из возможных четырёх. Компилятор пытается сделать код быстрее, но не жертвует читаемостью и соблюдением стандартов.

-fno-ident — отключение генерации метки идентификации. По умолчанию GCC добавляет в исполняемый файл информацию о версии компилятора и дате компиляции. Этот флаг отключает генерацию такой информации.

-fstack-protector — включение защиты стека. Компилятор добавляет в исполняемый файл код, который проверяет целостность стека при каждом его использовании. Это помогает предотвратить некоторые виды атак, связанные с переполнением буфера.

-fPIE — создание позиции для импорта (Position Independent Executable). Такой исполняемый файл может быть загружен в произвольный адрес памяти, что упрощает обеспечение безопасности системы.

-o — указывает имя выходного файла.

- main.c — имя исходного файла, который нужно скомпилировать.


УСТАНОВКА ИКОНКИ СКОМПИЛИРОВАННОЙ ПРОГРАММЕ:

Задать иконку скомпилированной программе можно через "Resource Hacker" ИЗ ПАПКИ "Стороннее ПО".
Запускаем "ResourceHacker.exe" -> открываем скомпилированный *.exe через Ctrl+O, далее Ctrl+M и выбираем *.ico иконку (разрешения 48x48 достаточно) и жмём "Добавить ресурс" и сохраняем *.exe с заменой файла.
